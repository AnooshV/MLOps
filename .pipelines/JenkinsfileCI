pipeline {
    agent any
    stages {
        stage('Calculate Git Hash'){
            steps {
                script {
                    BUILD_TAG = sh (
                        script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    IS_TEST_ENABLED = sh(script: 'jq .test.enabled .pipelines/pipeline.json', returnStdout: true).toBoolean()
                    GIT_BRANCH_NAME = sh(script: 'echo $GIT_BRANCH', returnStdout: true).trim()
                    env.BUILD_TAG = BUILD_TAG
                    env.IS_TEST_ENABLED = IS_TEST_ENABLED
                    env.GIT_BRANCH_NAME = GIT_BRANCH_NAME
                }
            }
        }
        stage('Custom') {
            steps {

                script {
                    print('hello world')
                }
            }
        }
        stage('Build'){
            steps{
                sh '''
                        chmod +x -R .pipelines/stages
                        .pipelines/stages/build.sh
                    '''
            }
        }
        stage('Test'){
            steps{
                sh '''
                        .pipelines/stages/test.sh
                    '''
            }
        }
        stage('Login to Azure'){
            steps{
                sh '''
                az login --service-principal -u ${app_id} -p ${password} --tenant ${tenant_id}
                '''
            }
        }
        stage('Training using development data'){
            steps{
                sh '''
                az ml job create --file src/job.yml --resource-group "adas-datapipeline-poc" --workspace-name "av-mlops-common-workspace" --stream 
                '''
            }
        }
        stage('Training using production data'){
            input{
                message "Do you want to proceed for production training?"
            }

            steps{
                sh '''
                az ml job create --file src/job_prod.yml --resource-group "adas-datapipeline-poc" --workspace-name "av-mlops-common-workspace" --stream
                '''
            }
        }
        stage('Production deployment'){
            input{
                message "Do you want to proceed for production deployment?"
            }

            steps{
                sh '''
                az configure --defaults workspace="av-mlops-common-workspace" group="adas-datapipeline-poc"
                az ml online-endpoint update --name "anoosh-endpoint" -f src/model/endpoint.yml
                JOB_NAME=$(az ml job list --query "[?experiment_name == 'dev-experiment'].name | [0]" | tr -d '"')
                az ml model create --name "anoosh-model" --type "mlflow_model" --path "azureml://jobs/$JOB_NAME/outputs/artifacts/model"
                az ml online-deployment update --name anoosh-deployment --endpoint "anoosh-endpoint" -f src/anoosh-deployment.yml
                '''
            }
        }
        
     }
     post {
        always {
            cleanWs(cleanWhenNotBuilt: false,
                    deleteDirs: true,
                    disableDeferredWipeout: true,
                    notFailBuild: true,
                    patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
                                [pattern: '.propsfile', type: 'EXCLUDE']])
        }
    }
}